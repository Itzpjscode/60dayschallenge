// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution{
    public:
    //arr1,arr2 : the arrays
    // n, m: size of arrays
    //Function to return a list containing the union of the two arrays. 
    vector<int> findUnion(int arr1[], int arr2[], int n, int m)
    {
        //Your code here
        //return vector with correct order of elements
        vector<int> u;
        int i,j,count=0;
        for(i=0;i<n;i++)
        {
           if(arr1[i]==arr1[i+1])
            {
                u.push_back(arr1[i]);
                i++;
                
            }
            else
            {  
               u.push_back(arr1[i]);
                 
            }
        }
        for(j=0;j<m;j++)
        {
            if(arr2[j]==arr2[j+1])
            {
                u.push_back(arr2[j]);
                j++;
                
                
            }
            else
            {  
               u.push_back(arr2[j]);
                 
            }
        }
        sort(u.begin(),u.end());
        i=u.size()-1;
        while(i>=0)
        {
            if(u[i]==u[i-1])
            u.erase(u.begin()+i);
            i--;
        }
      
          // u.erase(std::unique(u.begin() , u.end()), u.end()) ; 
        
        return u;
        
    }
};

// { Driver Code Starts.

int main() {
	
	int T;
	cin >> T;
	
	while(T--){
	    
	    
	    
	    int N, M;
	    cin >>N >> M;
	    
	    int arr1[N];
	    int arr2[M];
	    
	    for(int i = 0;i<N;i++){
	        cin >> arr1[i];
	    }
	    
	    for(int i = 0;i<M;i++){
	        cin >> arr2[i];
	    }
	    Solution ob;
	    vector<int> ans = ob.findUnion(arr1,arr2, N, M);
	    for(int i: ans)cout<<i<<' ';
	    cout << endl;
	    
	}
	
	return 0;
}  // } Driver Code Ends